{
    name	selectedparms

	parm {
	    name	"cache_path"
	    label	"Input Cache File"
	    type	file
	    default	{ "" }
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"res_mode"
	    label	"Resolution Mode"
	    type	ordinal
	    default	{ "0" }
	    menu	{
		"0"	"Full Resolution"
		"1"	"Preview Resolution"
	    }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"preview_res"
	    label	"Preview Resolution"
	    type	integer
	    default	{ "255" }
	    disablewhen	"{ res_mode != 1 }"
	    range	{ 0 255 }
	    export	none
	}
	parm {
	    name	"cache_load"
	    label	"Do load cache"
	    type	integer
	    invisible
	    default	{ "1" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"icr"
	    label	"Cache Range"
	    type	string
	    invisible
	    default	{ "" }
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"isz"
	    label	"Container Dimensions"
	    type	string
	    invisible
	    default	{ "" }
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"parm18"
	    label	"Cache Output"
	    type	string
	    invisible
	    size	16
	    default	{ "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" }
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "editor" "1" }
	    parmtag	{ "script_callback_language" "python" }
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"anim_mode"
	    label	"Animation Control"
	    type	ordinal
	    default	{ "0" }
	    menu	{
		"0"	"Manual"
		"1"	"Frame Index"
		"2"	"Loop"
	    }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"t2f"
	    label	"Frame Index"
	    type	float
	    default	{ "1" }
	    disablewhen	"{ anim_mode != 1 }"
	    range	{ 0! 1e+006! }
	    export	none
	}
	parm {
	    name	"loop_overlap"
	    label	"Loop Overlap"
	    type	integer
	    default	{ "0" }
	    disablewhen	"{ anim_mode != 2 }"
	    range	{ 0! 1e+006! }
	    export	none
	}
	parm {
	    name	"read_offset"
	    label	"Cache Start"
	    type	integer
	    default	{ "1" }
	    disablewhen	"{ anim_mode == 1 }"
	    range	{ 0! 1e+006! }
	    export	none
	}
	parm {
	    name	"play_at"
	    label	"Play Start"
	    type	integer
	    default	{ "1" }
	    disablewhen	"{ anim_mode == 1 }"
	    range	{ 0! 1e+006! }
	    export	none
	}
	parm {
	    name	"max_length"
	    label	"Play Length"
	    type	integer
	    default	{ "0" }
	    disablewhen	"{ anim_mode == 1 }"
	    range	{ 0! 1e+006! }
	    export	none
	}
	parm {
	    name	"play_speed"
	    label	"Play Speed"
	    type	float
	    default	{ "1" }
	    disablewhen	"{ anim_mode == 1 }"
	    range	{ -10! 10! }
	    export	none
	}
	parm {
	    name	"blend_method"
	    label	"Frame Blending"
	    type	ordinal
	    default	{ "0" }
	    menu	{
		"0"	"Interpolation"
		"1"	"Velocity"
	    }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"load_nearest"
	    label	"Load Nearest Possible"
	    type	toggle
	    default	{ "0" }
	    range	{ 0 1 }
	    export	none
	}
	parm {
	    name	"flip_yz"
	    label	"Flip Up axis"
	    type	toggle
	    default	{ "0" }
	    range	{ 0 1 }
	    export	none
	}

    group {
	name	"folder3"
	label	"Channel Mapping"

	parm {
	    name	"channel_smoke"
	    label	"Smoke"
	    type	ordinal
	    default	{ "0" }
		menu	{
		    [ "menuItems = ['0', 'None']" ]
		    [ "geom = kwargs['node'].geometry()" ]
		    [ "if not geom:" ]
		    [ "    return menuItems" ]
		    [ "prim = geom.prims()[0] if len(geom.prims()) > 0 else None" ]
		    [ "if prim and 'phx_channel_map' in prim.intrinsicNames():" ]
		    [ "    channels = prim.intrinsicValue('phx_channel_map')" ]
		    [ "    if type(channels) is tuple:" ]
		    [ "        # duplicate all channels so we have (key, val) pairs" ]
		    [ "        menuItems.extend([channels[c//2] for c in range(len(channels) * 2)])" ]
		    [ "    else:" ]
		    [ "        menuItems.extend([channels, channels])" ]
		    [ "return menuItems" ]
		    language	python
		}
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"channel_temp"
	    label	"Temperature"
	    type	ordinal
	    default	{ "0" }
		menu	{
		    [ "menuItems = ['0', 'None']" ]
		    [ "geom = kwargs['node'].geometry()" ]
		    [ "if not geom:" ]
		    [ "    return menuItems" ]
		    [ "prim = geom.prims()[0] if len(geom.prims()) > 0 else None" ]
		    [ "if prim and 'phx_channel_map' in prim.intrinsicNames():" ]
		    [ "    channels = prim.intrinsicValue('phx_channel_map')" ]
		    [ "    if type(channels) is tuple:" ]
		    [ "        # duplicate all channels so we have (key, val) pairs" ]
		    [ "        menuItems.extend([channels[c//2] for c in range(len(channels) * 2)])" ]
		    [ "    else:" ]
		    [ "        menuItems.extend([channels, channels])" ]
		    [ "return menuItems" ]
		    language	python
		}
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"channel_fuel"
	    label	"Fuel"
	    type	ordinal
	    default	{ "0" }
		menu	{
		    [ "menuItems = ['0', 'None']" ]
		    [ "geom = kwargs['node'].geometry()" ]
		    [ "if not geom:" ]
		    [ "    return menuItems" ]
		    [ "prim = geom.prims()[0] if len(geom.prims()) > 0 else None" ]
		    [ "if prim and 'phx_channel_map' in prim.intrinsicNames():" ]
		    [ "    channels = prim.intrinsicValue('phx_channel_map')" ]
		    [ "    if type(channels) is tuple:" ]
		    [ "        # duplicate all channels so we have (key, val) pairs" ]
		    [ "        menuItems.extend([channels[c//2] for c in range(len(channels) * 2)])" ]
		    [ "    else:" ]
		    [ "        menuItems.extend([channels, channels])" ]
		    [ "return menuItems" ]
		    language	python
		}
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"channel_vel_x"
	    label	"Velocity.x"
	    type	ordinal
	    default	{ "0" }
		menu	{
		    [ "menuItems = ['0', 'None']" ]
		    [ "geom = kwargs['node'].geometry()" ]
		    [ "if not geom:" ]
		    [ "    return menuItems" ]
		    [ "prim = geom.prims()[0] if len(geom.prims()) > 0 else None" ]
		    [ "if prim and 'phx_channel_map' in prim.intrinsicNames():" ]
		    [ "    channels = prim.intrinsicValue('phx_channel_map')" ]
		    [ "    if type(channels) is tuple:" ]
		    [ "        # duplicate all channels so we have (key, val) pairs" ]
		    [ "        menuItems.extend([channels[c//2] for c in range(len(channels) * 2)])" ]
		    [ "    else:" ]
		    [ "        menuItems.extend([channels, channels])" ]
		    [ "return menuItems" ]
		    language	python
		}
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"channel_vel_y"
	    label	"Velocity.y"
	    type	ordinal
	    default	{ "0" }
		menu	{
		    [ "menuItems = ['0', 'None']" ]
		    [ "geom = kwargs['node'].geometry()" ]
		    [ "if not geom:" ]
		    [ "    return menuItems" ]
		    [ "prim = geom.prims()[0] if len(geom.prims()) > 0 else None" ]
		    [ "if prim and 'phx_channel_map' in prim.intrinsicNames():" ]
		    [ "    channels = prim.intrinsicValue('phx_channel_map')" ]
		    [ "    if type(channels) is tuple:" ]
		    [ "        # duplicate all channels so we have (key, val) pairs" ]
		    [ "        menuItems.extend([channels[c//2] for c in range(len(channels) * 2)])" ]
		    [ "    else:" ]
		    [ "        menuItems.extend([channels, channels])" ]
		    [ "return menuItems" ]
		    language	python
		}
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"channel_vel_z"
	    label	"Velocity.z"
	    type	ordinal
	    default	{ "0" }
		menu	{
		    [ "menuItems = ['0', 'None']" ]
		    [ "geom = kwargs['node'].geometry()" ]
		    [ "if not geom:" ]
		    [ "    return menuItems" ]
		    [ "prim = geom.prims()[0] if len(geom.prims()) > 0 else None" ]
		    [ "if prim and 'phx_channel_map' in prim.intrinsicNames():" ]
		    [ "    channels = prim.intrinsicValue('phx_channel_map')" ]
		    [ "    if type(channels) is tuple:" ]
		    [ "        # duplicate all channels so we have (key, val) pairs" ]
		    [ "        menuItems.extend([channels[c//2] for c in range(len(channels) * 2)])" ]
		    [ "    else:" ]
		    [ "        menuItems.extend([channels, channels])" ]
		    [ "return menuItems" ]
		    language	python
		}
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"channel_red"
	    label	"Red"
	    type	ordinal
	    default	{ "0" }
		menu	{
		    [ "menuItems = ['0', 'None']" ]
		    [ "geom = kwargs['node'].geometry()" ]
		    [ "if not geom:" ]
		    [ "    return menuItems" ]
		    [ "prim = geom.prims()[0] if len(geom.prims()) > 0 else None" ]
		    [ "if prim and 'phx_channel_map' in prim.intrinsicNames():" ]
		    [ "    channels = prim.intrinsicValue('phx_channel_map')" ]
		    [ "    if type(channels) is tuple:" ]
		    [ "        # duplicate all channels so we have (key, val) pairs" ]
		    [ "        menuItems.extend([channels[c//2] for c in range(len(channels) * 2)])" ]
		    [ "    else:" ]
		    [ "        menuItems.extend([channels, channels])" ]
		    [ "return menuItems" ]
		    language	python
		}
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"channel_green"
	    label	"Green"
	    type	ordinal
	    default	{ "0" }
		menu	{
		    [ "menuItems = ['0', 'None']" ]
		    [ "geom = kwargs['node'].geometry()" ]
		    [ "if not geom:" ]
		    [ "    return menuItems" ]
		    [ "prim = geom.prims()[0] if len(geom.prims()) > 0 else None" ]
		    [ "if prim and 'phx_channel_map' in prim.intrinsicNames():" ]
		    [ "    channels = prim.intrinsicValue('phx_channel_map')" ]
		    [ "    if type(channels) is tuple:" ]
		    [ "        # duplicate all channels so we have (key, val) pairs" ]
		    [ "        menuItems.extend([channels[c//2] for c in range(len(channels) * 2)])" ]
		    [ "    else:" ]
		    [ "        menuItems.extend([channels, channels])" ]
		    [ "return menuItems" ]
		    language	python
		}
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
	parm {
	    name	"channel_blue"
	    label	"Blue"
	    type	ordinal
	    default	{ "0" }
		menu	{
		    [ "menuItems = ['0', 'None']" ]
		    [ "geom = kwargs['node'].geometry()" ]
		    [ "if not geom:" ]
		    [ "    return menuItems" ]
		    [ "prim = geom.prims()[0] if len(geom.prims()) > 0 else None" ]
		    [ "if prim and 'phx_channel_map' in prim.intrinsicNames():" ]
		    [ "    channels = prim.intrinsicValue('phx_channel_map')" ]
		    [ "    if type(channels) is tuple:" ]
		    [ "        # duplicate all channels so we have (key, val) pairs" ]
		    [ "        menuItems.extend([channels[c//2] for c in range(len(channels) * 2)])" ]
		    [ "    else:" ]
		    [ "        menuItems.extend([channels, channels])" ]
		    [ "return menuItems" ]
		    language	python
		}
	    range	{ 0 1 }
	    export	none
	    parmtag	{ "vray_custom_handling" " " }
	}
    }

}